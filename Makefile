projectDir := $(realpath $(dir $(firstword $(MAKEFILE_LIST))))
name = vulcheck
files := $(shell find . -path ./build -prune -o -name '*.go' -print)
pkgs := $(shell go list ./... | grep -v test)

.PHONY: default
default: help

# from https://suva.sh/posts/well-documented-makefiles/
.PHONY: help
help:  ## Display this help
	awk 'BEGIN {FS = ":.*##"; printf "Usage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-22s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.PHONY: build
build: check ## Build golang app
	go build -o ${name} ./cmd/vulnerability-analysis/main.go

.PHONY: test
test: build ## Run unit tests for golang app
	@go test ./... -cover -coverprofile=coverage.out

.PHONY: run
run: run  ## Run the tool with default args
	./${name} trivy -n argocd -i index.docker.io/bitnami/etcd:3.5.12-debian-11-r3

.PHONY: apply-test-resources 
apply-test-resources: ## Applies test resources. These include the trivy CRDs and test resources
	@kubectl apply -f ./testdata/crds/ ; \
	kubectl apply -f ./testdata/resources/  || true

.PHONY: docker-build
docker-build: ## Build docker image
	docker build -t ${name} ${projectDir}

.PHONY: download
download: ## Download go dependencies
	@echo "== download go.mod dependencies"
	@go mod download

.PHONY: install-tools
install-tools: download ## Install build tools
	@echo "== installing tools from tools.go"
	@cat tools.go | grep _ | awk -F'"' '{print $$2}' | xargs -tI % go install %

.PHONY: check
check: install-tools vet lint checkformat ## Run static code checks

.PHONY: vet
vet: ## Run go vet
	@echo "== vet $(pkgs)"
	@go vet $(pkgs)

.PHONY: lint
lint: ## Run go lint
	@echo "== lint"
	@for pkg in $(pkgs); do \
		golint -set_exit_status $$pkg || exit 1 ; \
	done;

.PHONY: checkformat
checkformat: ## Run goimports
	@echo "== check formatting"
ifneq "$(shell goimports -l $(files))" ""
	@echo "code needs formatting. Run make format"
	@exit 1
endif

.PHONY: format
format: ## Format all go files
	@echo "== format"
	@goimports -w $(files)
	@sync

.PHONY: build-all
build-all: format test docker-build ## Format, lint, test, build local executable and docker image
