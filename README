# Vulnerability Analysis
## What's this tool?
The goal of this tool is to be used during image promotion. Based on the exit code, it should allow or block certain images from being promoted based on the security vulnerabilities
Exit codes:
* 0: Image was found and has the number of vulnerabilities below the thresholds
* 1: Image was found and has the number of vulnerabilities above the thresholds
* 2: Something went wrong on the execution (eg, report for the image not found)

## Usage
```bash
make build
./vulcheck trivy <namespace> <registry>/<imageName>:<imageVersion> <config-file-path>
```
## Supported Integrations
The goal of this tool is to support multiple vulnerability scanner integration. Currently supporting:
* Trivy

## Testing
For testing, we're spinning up a minikube and adding the necessary CRDs and resources. For local development you can execute:
```bash
minikube start
make apply-test-resources
```
CI will do a similar setup: create a minikube cluster, apply the CRDs and resources and execute the tests.

Merging to main will also trigger the tests and it will create a semantic version tag if tests are successful. 

## Defaults Thresholds
This tool will analyse the number of vulnerabilities and based on a threshold it will either succeed or fail. The current defaults are
* Critical: 2
* High : - 
* Medium: - 
* Low: -
* Unknown: -

## Config file
### Default config file
The application will try to read a config file to understand the configured thresholds. If left empty, it will try to read from `./config/config.yaml`. You may specify the path on the 3rd argument of the CLI. 
The config file has the follwing structure:
```yaml
threshold:
    criticalCount: 2
    highCount: 1001
    mediumCount: 1002
    lowCount: 1003
    unknownCount: 1004
```

All fields are  optional. If you leave a field unspecified, it will have the default value described above.

