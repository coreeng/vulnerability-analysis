package trivy

import (
	"context"
	"fmt"
	"time"

	tapis "github.com/aquasecurity/trivy-operator/pkg/apis/aquasecurity/v1alpha1"
	"github.com/cenkalti/backoff"
	"github.com/coreeng/vulnerability-analysis/pkg/config"
	"github.com/coreeng/vulnerability-analysis/pkg/globalflags"
	"github.com/coreeng/vulnerability-analysis/pkg/kubernetes"
	"github.com/coreeng/vulnerability-analysis/pkg/report"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

const (
	// TimeoutFlag represents the name of the timeout flag
	TimeoutFlag = "timeout"
	// NamespaceFlag represents the namespace of the timeout flag
	NamespaceFlag = "namespace"
	// ImageFlag represents the image of the timeout flag
	ImageFlag = "image"
	// DefaultTimeout represents the default timeout when not specified, -1 is equivalent to no retry
	DefaultTimeout = -1 * time.Second
)

var (
	timeout   time.Duration
	namespace string
	image     string
)

// NewTrivyCmd creates trivy command
func NewTrivyCmd() *cobra.Command {
	trivyCmd := &cobra.Command{
		Use:   "trivy",
		Short: "Analyse trivy",
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.SilenceUsage = true
			timeout, err := timeoutFlag(cmd)
			if err != nil {
				return err
			}
			namespace, err := namespaceFlag(cmd)
			if err != nil {
				return err
			}
			image, err := imageFlag(cmd)
			if err != nil {
				return err
			}
			cfg, err := globalflags.Config(cmd)
			if err != nil {
				return err
			}
			return analyseTrivy(*namespace, *image, *cfg, *timeout)
		},
	}

	return trivyCmd
}

func analyseTrivy(namespace, image, configPath string, timeout time.Duration) error {
	k8sClient, err := kubernetes.GetClient()
	if err != nil {
		return err
	}
	rep, err := loadVulnerabilityReport(namespace, image, timeout, k8sClient)
	if err != nil {
		return err
	}
	c, err := config.ReadConfig(configPath)
	if err != nil {
		return err
	}
	return rep.Validate(c.Threshold)
}

func loadVulnerabilityReport(namespace, image string, timeout time.Duration, k8sClient client.Client) (*report.AnalysisReport, error) {
	result := &tapis.VulnerabilitySummary{}
	if err := withBackoff(loadReport(namespace, image, result, k8sClient), timeout); err != nil {
		return nil, errors.Wrapf(err, "Failed to retrieve the report")
	}
	return &report.AnalysisReport{
		ImageName:     image,
		CriticalCount: result.CriticalCount,
		HighCount:     result.HighCount,
		MediumCount:   result.MediumCount,
		LowCount:      result.LowCount,
		UnknownCount:  result.UnknownCount,
	}, nil
}

func loadReport(namespace, image string, report *tapis.VulnerabilitySummary, k8sClient client.Client) func() error {
	return func() error {
		vlnReportList := &tapis.VulnerabilityReportList{}
		err := k8sClient.List(context.Background(), vlnReportList, client.InNamespace(namespace))
		if err != nil {
			return backoff.Permanent(errors.Wrapf(err, "Failed to list VulnerabilityReport"))
		}
		for _, r := range vlnReportList.Items {
			if image == fmt.Sprintf("%s/%s:%s", r.Report.Registry.Server, r.Report.Artifact.Repository, r.Report.Artifact.Tag) {
				r.Report.Summary.DeepCopyInto(report)
				return nil
			}
		}
		return errors.Errorf("Couldn't find vulnerability report for the image '%s' in the namespace '%s'", image, namespace)
	}
}

func withBackoff(f func() error, timeout time.Duration) error {
	expBackoff := backoff.NewExponentialBackOff()
	expBackoff.MaxElapsedTime = timeout
	err := backoff.Retry(f, expBackoff)
	if err != nil {
		if timeout > 0 {
			return errors.Wrapf(err, "Retry failed after: %s", expBackoff.MaxElapsedTime)
		}
		return err
	}
	return nil
}

func timeoutFlag(cmd *cobra.Command) (*time.Duration, error) {
	t, err := cmd.Flags().GetDuration(TimeoutFlag)
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to retrieve command line flag %s", TimeoutFlag)
	}
	return &t, nil
}

func namespaceFlag(cmd *cobra.Command) (*string, error) {
	n, err := cmd.Flags().GetString(NamespaceFlag)
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to retrieve command line flag %s", TimeoutFlag)
	}
	return &n, nil
}

func imageFlag(cmd *cobra.Command) (*string, error) {
	n, err := cmd.Flags().GetString(ImageFlag)
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to retrieve command line flag %s, err: %v", ImageFlag, err)
	}
	return &n, nil
}

// InitFlags initialise flags for trivy command
func InitFlags(cmd *cobra.Command) error {
	cmd.Flags().DurationVarP(&timeout, TimeoutFlag, "t", DefaultTimeout, "Time to wait for the report object to appear in kubernetes; passing [0] will retry forever")
	cmd.Flags().StringVarP(&namespace, NamespaceFlag, "n", "", "Namespace used to search kubernetes for the report")
	if err := cmd.MarkFlagRequired(NamespaceFlag); err != nil {
		return errors.Wrapf(err, "Failed to configure flag: %s", NamespaceFlag)
	}
	cmd.Flags().StringVarP(&image, ImageFlag, "i", "", "Image to validate vulnerabilities")
	if err := cmd.MarkFlagRequired(ImageFlag); err != nil {
		return errors.Wrapf(err, "Failed to configure flag: %s", ImageFlag)
	}
	return nil
}
