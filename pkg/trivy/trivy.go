package trivy

import (
	"context"
	"fmt"

	"github.com/coreeng/vulnerability-analysis/pkg/kubernetes"
	"github.com/coreeng/vulnerability-analysis/pkg/report"
	"github.com/mitchellh/mapstructure"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"k8s.io/apimachinery/pkg/runtime/schema"
)

type TrivyData struct {
	Report TrivyReport `mapstructure:"report"`
}
type TrivyReport struct {
	Artifact TrivyArtifact `mapstructure:"artifact"`
	Registry TrivyRegistry `mapstructure:"registry"`
	Summary  TrivySummary  `mapstructure:"summary"`
}
type TrivyArtifact struct {
	Repository string `mapstructure:"repository"`
	Tag        string `mapstructure:"tag"`
}

type TrivyRegistry struct {
	Server string `mapstructure:"server"`
}
type TrivySummary struct {
	CriticalCount int64 `mapstructure:"criticalCount"`
	HighCount     int64 `mapstructure:"highCount"`
	MediumCount   int64 `mapstructure:"mediumCount"`
	LowCount      int64 `mapstructure:"lowCount"`
	UnknownCount  int64 `mapstructure:"unknownCount"`
}

func NewTrivyCmd() *cobra.Command {
	trivyCmd := &cobra.Command{
		Use:   "trivy <namespace> <image-name>",
		Short: "Analyse trivy",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.SilenceUsage = true
			return analyseTrivy(args[0], args[1])
		},
	}

	return trivyCmd
}

func analyseTrivy(namespace, image string) error {

	rep, err := listVulnerabilityReports(namespace, image)
	if err != nil {
		return err
	}
	threshold := report.NewReportThreshold()

	return threshold.Validate(rep)
}

func listVulnerabilityReports(namespace, image string) (*report.AnalysisReport, error) {
	log.Infof("Fetching image %s, from namespace %s\n", image, namespace)

	vulnerabilityReportGroup := schema.GroupVersionResource{Group: "aquasecurity.github.io", Version: "v1alpha1", Resource: "vulnerabilityreports"}

	result, err := kubernetes.GetClient().Resource(vulnerabilityReportGroup).Namespace(namespace).List(context.Background(), metav1.ListOptions{})
	if err != nil {
		return nil, report.NewProcessingError(fmt.Sprintf("failed to list VulnerabilityReport: %v", err))
	}

	for _, d := range result.Items {
		result := &TrivyData{}
		err := mapstructure.Decode(d.Object, &result)
		if err != nil {
			return nil, report.NewProcessingError("Couldn't decode received data")
		}

		if image == fmt.Sprintf("%s/%s:%s", result.Report.Registry.Server, result.Report.Artifact.Repository, result.Report.Artifact.Tag) {

			return &report.AnalysisReport{
				ImageName:     image,
				CriticalCount: result.Report.Summary.CriticalCount,
				HighCount:     result.Report.Summary.HighCount,
				MediumCount:   result.Report.Summary.MediumCount,
				LowCount:      result.Report.Summary.LowCount,
				UnknownCount:  result.Report.Summary.UnknownCount,
			}, nil
		}
	}
	return nil, report.NewProcessingError(fmt.Sprintf("Couldn't find vulnerability report for the image '%s' in the namespace '%s'", image, namespace))
}
