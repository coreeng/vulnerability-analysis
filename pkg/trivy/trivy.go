package trivy

import (
	"context"
	"fmt"

	"github.com/coreeng/vulnerability-analysis/pkg/kubernetes"
	"github.com/spf13/cobra"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewTrivyCmd() *cobra.Command {
	trivyCmd := &cobra.Command{
		Use:   "trivy <namespace> <image-name>",
		Short: "Analyse trivy",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			if err := cmd.Help(); err != nil {
				return err
			}
			return analyseTrivy(args[0], args[1])
		},
	}

	return trivyCmd
}

func analyseTrivy(namespace, image string) error {

	report := listVulnerabilityReports(namespace, image)
	threshold := kubernetes.NewReportThreshold()

	return threshold.IsValid(report)
}

func listVulnerabilityReports(namespace, image string) *kubernetes.AnalysisReport {
	vulnerabilityReportGroup := schema.GroupVersionResource{Group: "aquasecurity.github.io", Version: "v1alpha1", Resource: "VulnerabilityReport"}

	result, err := kubernetes.GetClient().Resource(vulnerabilityReportGroup).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		panic(fmt.Errorf("failed to list: %v", err))
	}

	for _, d := range result.Items {
		repository := kubernetes.GetString(d.Object, "report", "artifact", "repository")
		tag := kubernetes.GetString(d.Object, "report", "artifact", "tag")
		server := kubernetes.GetString(d.Object, "report", "registry", "server")

		if image == fmt.Sprintf("%s/%s:%s", server, repository, tag) {

			return &kubernetes.AnalysisReport{
				ImageName:     image,
				CriticalCount: kubernetes.GetInt64(d.Object, "report", "summary", "criticalCount"),
				HighCount:     kubernetes.GetInt64(d.Object, "report", "summary", "highCount"),
				MediumCount:   kubernetes.GetInt64(d.Object, "report", "summary", "mediumCount"),
				LowCount:      kubernetes.GetInt64(d.Object, "report", "summary", "lowCount"),
				UnknownCount:  kubernetes.GetInt64(d.Object, "report", "summary", "unknownCount"),
			}
		}
	}

	panic(fmt.Sprintf("Couldn't find vulnerability report for the image '%s' in the namespace '%s'", image, namespace))
}
