package trivy

import (
	"testing"

	rep "github.com/coreeng/vulnerability-analysis/pkg/report"

	"github.com/coreeng/vulnerability-analysis/pkg/kubernetes"
	"github.com/stretchr/testify/assert"
)

func TestInitClient(t *testing.T) {
	dynamicClient := kubernetes.GetClient()
	assert.NotNil(t, dynamicClient, "Failed to create kubernetes dynamic client")
}

func TestFetchUnexistentReport(t *testing.T) {

	report, err := listVulnerabilityReports("argocd", "test")
	assert.NotNil(t, err, "Should receive error")
	assert.Nil(t, report, "Should not receive report")
	_, ok := err.(rep.ProcessingError)

	assert.True(t, ok, "Error should be of type Processing error")
}

func TestExistingReport(t *testing.T) {
	imageName := "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3"

	report, err := listVulnerabilityReports("argocd", imageName)
	assert.Nil(t, err, "error received")
	assert.NotNil(t, report, "No report")

	if report != nil {
		assert.EqualValues(t, report.ImageName, imageName, "Image name does not match")
		assert.EqualValues(t, report.CriticalCount, 2, "CriticalCount does not match")
		assert.EqualValues(t, report.HighCount, 28, "HighCount does not match")
		assert.EqualValues(t, report.MediumCount, 48, "MediumCount does not match")
		assert.EqualValues(t, report.LowCount, 80, "LowCount does not match")
		assert.EqualValues(t, report.UnknownCount, 0, "UnknownCount does not match")
	}
}
