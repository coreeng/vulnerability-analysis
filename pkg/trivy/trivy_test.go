package trivy

import (
	"context"
	"fmt"
	"path/filepath"
	"testing"

	"github.com/coreeng/vulnerability-analysis/pkg/kubernetes"
	"github.com/stretchr/testify/assert"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	k8s "k8s.io/client-go/kubernetes"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
)

func setupEnvTest(t *testing.T) *envtest.Environment {

	return &envtest.Environment{
		CRDDirectoryPaths: []string{filepath.Join("..", "..", "..", "testdata", "crds")},
	}

}

func stopEnvtest(envTest *envtest.Environment) {
	if stopErr := envTest.Stop(); stopErr != nil {
		fmt.Println("Failed to stop envtest", stopErr.Error())
		panic(stopErr)
	}
}

func createNamespace(namespace string, client *k8s.Clientset) {

	nsName := &v1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: namespace,
		},
	}
	client.CoreV1().Namespaces().Create(context.Background(), nsName, metav1.CreateOptions{})
}


func init() {
	
}
func TestStartEnvtest(t *testing.T) {

	envTest := setupEnvTest(t)
	cfg, err := envTest.Start()
	// defer stopEnvtest(envTest)

	assert.NotNil(t, err)
	dynamicClient := kubernetes.GetClientWithConfig(cfg)
	assert.NotNil(t, dynamicClient, "Failed to create kubernetes dynamic client")

	client, err := k8s.NewForConfig(cfg)
	assert.Nil(t, err, "Failed to create kubernetes client")
	assert.NotNil(t, client, "Failed to create kubernetes client")
	createNamespace("argocd", client)
}
