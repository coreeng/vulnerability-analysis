package report

import (
	"fmt"
	"math"
	"strings"
	"text/tabwriter"

	log "github.com/sirupsen/logrus"
)

type AnalysisReport struct {
	ImageName     string
	CriticalCount int64
	HighCount     int64
	MediumCount   int64
	LowCount      int64
	UnknownCount  int64
}

type ReportThresholds struct {
	CriticalCount int64
	HighCount     int64
	MediumCount   int64
	LowCount      int64
	UnknownCount  int64
}

func NewReportThreshold() *ReportThresholds {
	return &ReportThresholds{ // This might eventually come form config
		CriticalCount: 2,
		HighCount:     math.MaxInt64,
		MediumCount:   math.MaxInt64,
		LowCount:      math.MaxInt64,
		UnknownCount:  math.MaxInt64,
	}
}

func (t *ReportThresholds) Validate(report *AnalysisReport) error {

	val := new(strings.Builder)
	w := tabwriter.NewWriter(val, 0, 8, 1, '\t', 0)
	fmt.Fprintf(w, "Type\tThreshold\tReport Value\t\n")
	fmt.Fprintf(w, "Critical\t%s\t%d\t\n", getVal(t.CriticalCount), report.CriticalCount)
	fmt.Fprintf(w, "High\t%s\t%d\t\n", getVal(t.HighCount), report.HighCount)
	fmt.Fprintf(w, "Medium\t%s\t%d\t\n", getVal(t.MediumCount), report.MediumCount)
	fmt.Fprintf(w, "Low\t%s\t%d\t\n", getVal(t.LowCount), report.LowCount)
	fmt.Fprintf(w, "Unknown\t%s\t%d\t\n", getVal(t.UnknownCount), report.UnknownCount)
	w.Flush()
	log.Infof("Analysis Report:\n%s", val.String())
	if t.CriticalCount >= report.CriticalCount &&
		t.HighCount >= report.HighCount &&
		t.MediumCount >= report.MediumCount &&
		t.LowCount >= report.LowCount &&
		t.UnknownCount >= report.UnknownCount {
		return nil
	} else {

		return fmt.Errorf("thresholds exceeded\n%s", val.String())

	}
}

func getVal(val int64) string {
	if val == math.MaxInt64 {
		return "-"
	} else {
		return fmt.Sprintf("%d", val)
	}
}
