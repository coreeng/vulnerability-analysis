package report

import (
	"fmt"
	"strings"
	"text/tabwriter"

	vaerror "github.com/coreeng/vulnerability-analysis/pkg/error"

	"github.com/coreeng/vulnerability-analysis/pkg/config"

	log "github.com/sirupsen/logrus"
)

const (
	minWidth  = 0
	tabwWidth = 8
	padding   = 1
	padchar   = '\t'
	flags     = 0
)

// AnalysisReport represents the report generated when checking vulnerabilities
type AnalysisReport struct {
	ImageName     string
	CriticalCount int
	HighCount     int
	MediumCount   int
	LowCount      int
	UnknownCount  int
}

// Validate validates the result against thresholds
func (report *AnalysisReport) Validate(t *config.ThresholdConfig) error {

	val := new(strings.Builder)
	w := tabwriter.NewWriter(val, minWidth, tabwWidth, padding, padchar, flags)
	fmt.Fprintf(w, "Type\tThreshold\tReport Value\t\n")
	fmt.Fprintf(w, "Critical\t%d\t%d\t\n", t.CriticalCount, report.CriticalCount)
	fmt.Fprintf(w, "High\t%d\t%d\t\n", t.HighCount, report.HighCount)
	fmt.Fprintf(w, "Medium\t%d\t%d\t\n", t.MediumCount, report.MediumCount)
	fmt.Fprintf(w, "Low\t%d\t%d\t\n", t.LowCount, report.LowCount)
	fmt.Fprintf(w, "Unknown\t%d\t%d\t\n", t.UnknownCount, report.UnknownCount)
	w.Flush()
	log.Infof("Analysis Report:\n%s", val.String())
	if t.CriticalCount >= report.CriticalCount &&
		t.HighCount >= report.HighCount &&
		t.MediumCount >= report.MediumCount &&
		t.LowCount >= report.LowCount &&
		t.UnknownCount >= report.UnknownCount {
		return nil
	}
	return vaerror.NewValidationFailedError("thresholds exceeded\n%s", val.String())
}
