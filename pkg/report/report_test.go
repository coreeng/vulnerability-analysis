package report

import (
	"math"
	"testing"

	"github.com/coreeng/vulnerability-analysis/pkg/config"

	"github.com/stretchr/testify/assert"
)

func TestDefaultThreshold(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	assert.EqualValues(t, threshold.CriticalCount, 2, "Test critical count default value.")
	assert.EqualValues(t, threshold.HighCount, math.MaxInt64, "Test high count default value.")
	assert.EqualValues(t, threshold.MediumCount, math.MaxInt64, "Test medium count default value.")
	assert.EqualValues(t, threshold.LowCount, math.MaxInt64, "Test low count default value.")
	assert.EqualValues(t, threshold.UnknownCount, math.MaxInt64, "Test unknown count default value.")
}

func TestValidateIfValuesAreTheSame(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold

	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     2,
		MediumCount:   2,
		LowCount:      2,
		UnknownCount:  2,
	}
	err := report.Validate(threshold)
	assert.Nil(t, err, "Validate should be successful")
}

func TestExceededThresholdCritical(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 3,
		HighCount:     2,
		MediumCount:   2,
		LowCount:      2,
		UnknownCount:  2,
	}
	err := report.Validate(threshold)
	assert.NotNil(t, err, "Validate should throw an error")
}

func TestExceededThresholdHigh(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     3,
		MediumCount:   2,
		LowCount:      2,
		UnknownCount:  2,
	}
	err := report.Validate(threshold)
	assert.NotNil(t, err, "Validate should throw an error")
}

func TestExceededThresholdMedium(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     2,
		MediumCount:   3,
		LowCount:      2,
		UnknownCount:  2,
	}
	err := report.Validate(threshold)
	assert.NotNil(t, err, "Validate should throw an error")
}

func TestExceededThresholdLow(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     2,
		MediumCount:   2,
		LowCount:      3,
		UnknownCount:  2,
	}
	err := report.Validate(threshold)
	assert.NotNil(t, err, "Validate should throw an error")
}

func TestExceededThresholdUnknown(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold
	threshold.HighCount = 2
	threshold.MediumCount = 2
	threshold.LowCount = 2
	threshold.UnknownCount = 2
	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     2,
		MediumCount:   2,
		LowCount:      2,
		UnknownCount:  3,
	}
	err := report.Validate(threshold)
	assert.NotNil(t, err, "Validate should throw an error")
}

func TestDefaultMaxIntValues(t *testing.T) {

	config, _ := config.ReadConfig("")
	threshold := config.Threshold

	report := &AnalysisReport{
		CriticalCount: 2,
		HighCount:     math.MaxInt64,
		MediumCount:   math.MaxInt64,
		LowCount:      math.MaxInt64,
		UnknownCount:  math.MaxInt64,
	}
	err := report.Validate(threshold)
	assert.Nil(t, err, "Validate should throw be successful")
}
