package config

import (
	"math"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNotFoundConfigFile(t *testing.T) {

	config, err := ReadConfig("../../testdata/config/config-not-found.yaml")
	assert.Nil(t, err, "Received and error", err)

	threshold := config.Threshold
	assert.EqualValues(t, threshold.CriticalCount, 2, "Test critical count default value.")
	assert.EqualValues(t, threshold.HighCount, math.MaxInt64, "Test high count default value.")
	assert.EqualValues(t, threshold.MediumCount, math.MaxInt64, "Test medium count default value.")
	assert.EqualValues(t, threshold.LowCount, math.MaxInt64, "Test low count default value.")
	assert.EqualValues(t, threshold.UnknownCount, math.MaxInt64, "Test unknown count default value.")
}

func TestConfigFileCriticalWithDefaults(t *testing.T) {

	config, _ := ReadConfig("../../testdata/config/config-critical.yaml")
	threshold := config.Threshold
	assert.EqualValues(t, threshold.CriticalCount, 4, "Test critical count default value.")
	assert.EqualValues(t, threshold.HighCount, math.MaxInt64, "Test high count default value.")
	assert.EqualValues(t, threshold.MediumCount, math.MaxInt64, "Test medium count default value.")
	assert.EqualValues(t, threshold.LowCount, math.MaxInt64, "Test low count default value.")
	assert.EqualValues(t, threshold.UnknownCount, math.MaxInt64, "Test unknown count default value.")
}

func TestValuesAllConfig(t *testing.T) {

	config, _ := ReadConfig("../../testdata/config/config-all.yaml")
	threshold := config.Threshold
	assert.EqualValues(t, threshold.CriticalCount, 2, "Test critical count default value.")
	assert.EqualValues(t, threshold.HighCount, 1001, "Test high count default value.")
	assert.EqualValues(t, threshold.MediumCount, 1002, "Test medium count default value.")
	assert.EqualValues(t, threshold.LowCount, 1003, "Test low count default value.")
	assert.EqualValues(t, threshold.UnknownCount, 1004, "Test unknown count default value.")
}

func TestInvalidConfigError(t *testing.T) {

	_, err := ReadConfig("../../testdata/config/config-error.yaml")
	assert.NotNil(t, err, "Did not receive error")
}
