package kubernetes

import (
	"fmt"
	"math"
	"strings"
	"text/tabwriter"
)

type AnalysisReport struct {
	ImageName     string
	CriticalCount int64
	HighCount     int64
	MediumCount   int64
	LowCount      int64
	UnknownCount  int64
}

type ReportThresholds struct {
	CriticalCount int64
	HighCount     int64
	MediumCount   int64
	LowCount      int64
	UnknownCount  int64
}

func NewReportThreshold() *ReportThresholds {
	return &ReportThresholds{
		CriticalCount: 1,
		HighCount:     math.MaxInt64,
		MediumCount:   math.MaxInt64,
		LowCount:      math.MaxInt64,
		UnknownCount:  math.MaxInt64,
	}
}

func (t *ReportThresholds) IsValid(report *AnalysisReport) error {
	if t.CriticalCount > report.CriticalCount &&
		t.HighCount > report.HighCount &&
		t.MediumCount > report.MediumCount &&
		t.LowCount > report.LowCount &&
		t.UnknownCount > report.UnknownCount {
		return nil
	} else {
		val := new(strings.Builder)
		w := tabwriter.NewWriter(val, 0, 8, 1, '\t', 0)
		fmt.Fprintf(w, "Type\tThreshold\tActual Value\t\n")
		fmt.Fprintf(w, "Critical\t%d\t%d\t\n", t.CriticalCount, report.CriticalCount)
		fmt.Fprintf(w, "High\t%d\t%d\t\n", t.HighCount, report.HighCount)
		fmt.Fprintf(w, "Medium\t%d\t%d\t\n", t.MediumCount, report.MediumCount)
		fmt.Fprintf(w, "Low\t%d\t%d\t\n", t.LowCount, report.LowCount)
		fmt.Fprintf(w, "Unknown\t%d\t%d\t\n", t.UnknownCount, report.UnknownCount)
		w.Flush()
		return fmt.Errorf(val.String())

	}
}
