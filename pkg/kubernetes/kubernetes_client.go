package kubernetes

import (
	"fmt"
	"strings"
	"sync"

	ctrl "sigs.k8s.io/controller-runtime"

	log "github.com/sirupsen/logrus"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/client-go/dynamic"
)

var lock = &sync.Mutex{}

var clientInstance *dynamic.DynamicClient

func GetClient() *dynamic.DynamicClient {
	if clientInstance == nil {
		lock.Lock()
		defer lock.Unlock()
		if clientInstance == nil {
			log.Info("Creating k8s client instance.")
			config := ctrl.GetConfigOrDie()
			clientset := dynamic.NewForConfigOrDie(config)

			clientInstance = clientset

		} else {
			log.Info("Client instance already created.")
		}

	} else {
		log.Info("Client instance already created.")
	}
	return clientInstance
}

func GetString(obj map[string]interface{}, fields ...string) string {
	field, found, err := unstructured.NestedString(obj, fields...)

	if err != nil || !found {
		panic(fmt.Errorf("could not find field %s", strings.Join(fields, ".")))
	}
	return field
}

func GetInt64(obj map[string]interface{}, fields ...string) int64 {
	field, found, err := unstructured.NestedInt64(obj, fields...)

	if err != nil || !found {
		panic(fmt.Errorf("could not find field %s", strings.Join(fields, ".")))
	}
	return field
}
