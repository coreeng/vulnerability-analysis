package kubernetes

import (
	"sync"

	"github.com/aquasecurity/trivy-operator/pkg/apis/aquasecurity/v1alpha1"
	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	"k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var lock = &sync.Mutex{}

var clientInstance client.Client

// GetClient returns instance of a k8 client
func GetClient() (client.Client, error) {
	if clientInstance == nil {
		lock.Lock()
		defer lock.Unlock()
		if clientInstance == nil {
			log.Info("Creating k8s client instance")

			err := v1alpha1.AddToScheme(scheme.Scheme)
			if err != nil {
				return nil, errors.Wrapf(err, "Failed to register schema")
			}

			config, err := ctrl.GetConfig()
			if err != nil {
				return nil, errors.Wrapf(err, "Unable to get kubeconfig")
			}

			clientInstance, err = client.New(config, client.Options{Scheme: scheme.Scheme})
			if err != nil {
				return nil, errors.Wrapf(err, "Failed to crreate kubernetes client")
			}
		} else {
			log.Info("Client instance already created.")
		}

	} else {
		log.Info("Client instance already created.")
	}
	return clientInstance, nil
}
