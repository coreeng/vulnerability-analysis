package main

import (
	"os/exec"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

// End to end tests
func executeCommand(t *testing.T, command ...string) (int, string) {
	out, err := exec.Command("/bin/bash", command...).Output()

	if exiterr, ok := err.(*exec.ExitError); ok {
		return exiterr.ExitCode(), string(out)
	} else {
		assert.Failf(t, "Received an error from execCommand: %s", err.Error())
	}

	return 3, "Error"
}
func TestSuccessfulCall(t *testing.T) {
	exitCode, _ := executeCommand(t, "-c", "go", "run", "./cmd/vulnerability-analysis/main.go", "trivy", "argocd", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3")
	assert.EqualValues(t, exitCode, 0)
}

func TestMissingArguments(t *testing.T) {
	exitCode, out := executeCommand(t, "-c", "go", "run", "./cmd/vulnerability-analysis/main.go", "trivy", "argocd")
	assert.EqualValues(t, exitCode, 2)
	assert.True(t, strings.HasSuffix(out, "failed to list VulnerabilityReport: the server could not find the requested resource\nexit status 2"), "Unexpected output:"+out)

}

func TestNotFoundImage(t *testing.T) {
	exitCode, out := executeCommand(t, "-c", "go", "run", "./cmd/vulnerability-analysis/main.go", "trivy", "argocd", "image-not-found")
	assert.EqualValues(t, exitCode, 2)
	assert.True(t, strings.HasSuffix(out, "Error: accepts 2 arg(s), received 1"), "Executed with not enough commands: "+out)
}
