package main

import (
	"bytes"
	"errors"
	"os/exec"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

const (
	defaultTimeout = 1000 * time.Millisecond
)

// End to end tests
func executeCommand(command string, args ...string) (int, string) {
	exitCode := 0

	cmd := exec.Command(command, args...)
	cmd.Stdin = strings.NewReader("")

	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &out
	err := cmd.Run()

	if err != nil {
		var exiterr *exec.ExitError
		if errors.As(err, &exiterr) {
			exitCode = exiterr.ExitCode()
		}
	}
	return exitCode, out.String()
}

func TestSuccessfulTimeoutFlagOptional(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3")
	assert.EqualValues(t, 0, exitCode)
}

func TestSuccessfulWithShortNameFlag(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3", "-t", "1s")
	assert.EqualValues(t, 0, exitCode)
}

func TestSuccessfulWithFullNameFlag(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "--namespace", "argocd", "--image", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3", "--timeout", "1s")
	assert.EqualValues(t, 0, exitCode)
}

func TestSuccessfulCallWithConfig(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3", "-c", "../../testdata/config/config-all.yaml")
	assert.EqualValues(t, 0, exitCode)
}

func TestCallExceedingThresholds(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3-error")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.Contains(out, "thresholds exceeded"), "Unexpected output: "+out)
}

func TestCallExceedingThresholdsWithConfigShortNameFlag(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3-error", "-c", "../../testdata/config/config-zero-critical.yaml")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.Contains(out, "thresholds exceeded"), "Unexpected output: "+out)
}

func TestCallExceedingThresholdsWithConfigFullNameFlag(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3-error", "--config", "../../testdata/config/config-zero-critical.yaml")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.Contains(out, "thresholds exceeded"), "Unexpected output: "+out)
}

func TestNotFoundImage(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-n", "argocd", "-i", "image-not-found", "-t", defaultTimeout.String())
	assert.EqualValues(t, 2, exitCode)
	assert.True(t, strings.Contains(out, "Couldn't find vulnerability report for the image 'image-not-found' in the namespace 'argocd'"), "Unexpected output: "+out)
}

func TestMissingImageFlag(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-n", "test")
	assert.EqualValues(t, 2, exitCode)
	assert.True(t, strings.Contains(out, "Error received:\\nrequired flag(s) \\\"image\\\" not set"), out)
}

func TestMissingNamespaceFlag(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "-i", "myimage")
	assert.EqualValues(t, 2, exitCode)
	assert.True(t, strings.Contains(out, "Error received:\\nrequired flag(s) \\\"namespace\\\" not set"), out)
}
