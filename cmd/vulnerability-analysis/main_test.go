package main

import (
	"bytes"
	"os/exec"
	"strings"
	"testing"

	log "github.com/sirupsen/logrus"

	"github.com/stretchr/testify/assert"
)

// End to end tests
func executeCommand(command string, args ...string) (int, string) {
	exitCode := 0

	cmd := exec.Command(command, args...)

	cmd.Stdin = strings.NewReader("")

	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &out

	err := cmd.Run()

	if err != nil {
		if exiterr, ok := err.(*exec.ExitError); ok {
			exitCode = exiterr.ExitCode()
		} else {
			panic(err)
		}
	}
	log.Printf("Cmd Output: %s", out.String())
	return exitCode, out.String()
}

func TestSuccessfulCall(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "argocd", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3")
	assert.EqualValues(t, 0, exitCode)
}

func TestSuccessfulCallWithConfig(t *testing.T) {
	exitCode, _ := executeCommand("../../vulcheck", "trivy", "argocd", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3", "../../testdata/config/config-all.yaml")
	assert.EqualValues(t, 0, exitCode)
}

func TestCallExceedingThresholds(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "argocd", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3-error")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.Contains(out, "thresholds exceeded"), "Unexpected output: "+out)
}

func TestCallExceedingThresholdsWithConfig(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "argocd", "index.docker.io/bitnami/etcd:3.5.12-debian-11-r3-error", "../../testdata/config/config-zero-critical.yaml")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.Contains(out, "thresholds exceeded"), "Unexpected output: "+out)

}

func TestNotFoundImage(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "argocd", "image-not-found")
	assert.EqualValues(t, 2, exitCode)
	assert.True(t, strings.Contains(out, "Couldn't find vulnerability report for the image 'image-not-found' in the namespace 'argocd'"), "Unexpected output: "+out)

}

func TestMissingArguments(t *testing.T) {
	exitCode, out := executeCommand("../../vulcheck", "trivy", "argocd")
	assert.EqualValues(t, 1, exitCode)
	assert.True(t, strings.HasPrefix(out, "Error: accepts between 2 and 3 arg(s), received 1"), "Executed with not enough commands: "+out)
}
